script.js

initial class instances

function (update){

    // LIFO (Last in First Out) Queue of Data
    let unprocessed_data = {"unprocessed_video": [],
                            "unprocessed_audio": []}

    // Another LIFO
    let vitals = {"blood_pressure": x,
                "BMP": y, 
                "breaths_per_minute": z}

    if (10ms passed):
        move spot

    if blob.in_area(getspot.position){
        unprocessed_data.append(sensor.sendData())
    }

    // Check if there is unprocessed data AND we haven't yet got the daily vitals

    if (unprocessed_data !== null && unprocessed_vitals !== full){
        if (unprocessed_data["unprocessed_video]!==null){
            vitals = processVideo()
        }
        if (unprocessed_data["unprocessed_audio]!==null){
            vitals = processAudio()
        }
    }

    if (midnight){
        personalModel.runRegression();
    }
}


spot.js

class spot{
    constructor method
    function (moving randomly){
        return (nextX, nextY)
    }

    function (repel from walls){
        return (nextX, nextY)
    }
}


blob.js

//Three instances blobs CCTV, Microphone, Video Call - SIZE TO MATCH ENGINEERING ANALYSIS

class blob{
    constructor method
    function in_area(x,y){
        return True/False
    }
}

sensor.js

//Three instances required 'CCTV', 'Microphone', 'Video Call'
//

class sensor{
    constructor method
    function send_data(){
        return array
    }
}

getVitals.js

// Mock AI Algorithm
// Two instances 'processAudio', 'processVideo'

class getVitals{
    constructor method
    function extractVitals(){
        return {"blood_pressure": x,
                 "BMP": y, 
                 "breaths_per_minute": z}
    }
}


personalModel.js

// Mock AI Algorithm
// Two instances 'processAudio', 'processVideo'

class personalModel{
    constructor(gender, age)
        this.gender = gender
        this.age = age

//Apply linear regression (take parameters including vitals but for 
//first initiation (if no vitals), these are assumed to be average)

    function runRegression(gender, age, blood_pressure=0.5, BPM=0.5, breaths_per_minute=0.5){
        return {'cancer': 0.5,
                'stroke': 0.2,
                'parkinsons': 0.1,
                'flu': 0.2,
                'diabetes': 0.6,
                'heart attack': 0.3,
                'pneuomonia': 0.4,
                }

    }
}




